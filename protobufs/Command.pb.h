// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Command_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Command_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Command_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Command_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Command_2eproto;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Command* Arena::CreateMaybeMessage<::Command>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Command_Header : int {
  Command_Header_UNKNOWN_HEADER = 0,
  Command_Header_ESTABLISH_CONNECTION = 1,
  Command_Header_START_STREAM = 2,
  Command_Header_STOP_STREAM = 3,
  Command_Header_START_TRACKING = 4,
  Command_Header_STOP_TRACKING = 5,
  Command_Header_Command_Header_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Command_Header_Command_Header_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Command_Header_IsValid(int value);
constexpr Command_Header Command_Header_Header_MIN = Command_Header_UNKNOWN_HEADER;
constexpr Command_Header Command_Header_Header_MAX = Command_Header_STOP_TRACKING;
constexpr int Command_Header_Header_ARRAYSIZE = Command_Header_Header_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Command_Header_descriptor();
template<typename T>
inline const std::string& Command_Header_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Command_Header>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Command_Header_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Command_Header_descriptor(), enum_t_value);
}
inline bool Command_Header_Parse(
    const std::string& name, Command_Header* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Command_Header>(
    Command_Header_descriptor(), name, value);
}
// ===================================================================

class Command :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Command_2eproto);
    return ::descriptor_table_Command_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Command_Header Header;
  static constexpr Header UNKNOWN_HEADER =
    Command_Header_UNKNOWN_HEADER;
  static constexpr Header ESTABLISH_CONNECTION =
    Command_Header_ESTABLISH_CONNECTION;
  static constexpr Header START_STREAM =
    Command_Header_START_STREAM;
  static constexpr Header STOP_STREAM =
    Command_Header_STOP_STREAM;
  static constexpr Header START_TRACKING =
    Command_Header_START_TRACKING;
  static constexpr Header STOP_TRACKING =
    Command_Header_STOP_TRACKING;
  static inline bool Header_IsValid(int value) {
    return Command_Header_IsValid(value);
  }
  static constexpr Header Header_MIN =
    Command_Header_Header_MIN;
  static constexpr Header Header_MAX =
    Command_Header_Header_MAX;
  static constexpr int Header_ARRAYSIZE =
    Command_Header_Header_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Header_descriptor() {
    return Command_Header_descriptor();
  }
  template<typename T>
  static inline const std::string& Header_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Header>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Header_Name.");
    return Command_Header_Name(enum_t_value);
  }
  static inline bool Header_Parse(const std::string& name,
      Header* value) {
    return Command_Header_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.protobuf.Any payload = 2;
  bool has_payload() const;
  void clear_payload();
  static const int kPayloadFieldNumber = 2;
  const PROTOBUF_NAMESPACE_ID::Any& payload() const;
  PROTOBUF_NAMESPACE_ID::Any* release_payload();
  PROTOBUF_NAMESPACE_ID::Any* mutable_payload();
  void set_allocated_payload(PROTOBUF_NAMESPACE_ID::Any* payload);

  // .Command.Header header = 1;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  ::Command_Header header() const;
  void set_header(::Command_Header value);

  // @@protoc_insertion_point(class_scope:Command)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Any* payload_;
  int header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Command_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Command

// .Command.Header header = 1;
inline void Command::clear_header() {
  header_ = 0;
}
inline ::Command_Header Command::header() const {
  // @@protoc_insertion_point(field_get:Command.header)
  return static_cast< ::Command_Header >(header_);
}
inline void Command::set_header(::Command_Header value) {
  
  header_ = value;
  // @@protoc_insertion_point(field_set:Command.header)
}

// .google.protobuf.Any payload = 2;
inline bool Command::has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Any& Command::payload() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = payload_;
  // @@protoc_insertion_point(field_get:Command.payload)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Any* Command::release_payload() {
  // @@protoc_insertion_point(field_release:Command.payload)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Command::mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    payload_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Command.payload)
  return payload_;
}
inline void Command::set_allocated_payload(PROTOBUF_NAMESPACE_ID::Any* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:Command.payload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Command_Header> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Command_Header>() {
  return ::Command_Header_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Command_2eproto
